# -*- coding: utf-8 -*-
"""Python_function

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XwHECXp1p1lfc5xwPibSEhGOeFx8LTBF
"""

def print_star(): #별표 출력을 위한 함수 정의
  print('**********')
  return None

print_star() #함수 호출

print(print_star())

def print_star(n):
  for _ in range(n):
    print('**********')
print_star(4)

def print_star(n):
  for _ in range(n):
    print('Hello ' * 2)
print_star(2)

def print_sub(a, b): #매개변수
  resault = a - b
  print(a,'와/과', b,'의 차는 ',resault,'입니다.')
print_sub(10, 20) #인수

def mulfiples(n, m):
  tup = () #튜플
  for i in range(1, m+1):
    tup += (i*n,)
  return tup

print(mulfiples(3, 4))

def multiples(n, m):
    return tuple(i * n for i in range(1, m + 1))

print(multiples(3, 4))

def multiples(n, m):
    return tuple(i * n for i in range(1, m + 1))

result = multiples(3, 4)
print(*result)

a = 3
b = 2
def print_sum():
  result = a + b
  print('print_sum() 내부 : ', a, '과', b, '의 합은' , result, '입니다.')
print_sum()

def print_sum():
  a = 100 #지역변수
  b = 200
  result = a + b
  print('print_sum() 내부 :', a, '과', b, '의 합은', result, '입니다.')

a = 10 #전역변수
b = 20
print_sum()
result = a + b
print('print_sum() 외부 :', a, '과', b, '의 합은', result, '입니다.')

def print_sum(a, b):
  result = a + b
  print('print_sum() 내부 :', a, '과', b, '의 합은', result, '입니다.')

a = 10
b = 20
print_sum(100, 200)
result = a + b
print('print_sum() 외부 :', a, '과', b, '의 합은', result, '입니다.')

def print_sum():
  global a, b # 지역변수를 전역변수로 지정 가능
  a = 100
  b = 200
  result = a + b
  print('print_sum() 내부 :', a, '과', b, '의 합은', result, '입니다.')

a = 10 #기존의 전역변수는 나가리 됨
b = 20 #기존의 전역변수는 나가리 됨
print_sum()
result = a + b
print('print_sum() 외부 :', a, '과', b, '의 합은', result, '입니다.')

def print_star(n): #매개변수에
  for _ in range(n):
    print('***********')
print_star() # 인지가 없어서 에러

def print_star(n=1): #파라메터에 디폴트 값을 정의했기 때문에 작동은 함 / 근데 이렇게 안씀
  for _ in range(n):
    print('***********')
print_star() #여기에 인자를 넣으면 인자를 우선으로 받음

def div(a, b = 2):
  return a / b

print('div(4) = ', div(4)) #4가 우선적으로 a자리에 들어가고, 인자가 없는 b는 디폴트인 2의 값으로 지정됨 / 쓰이지는 않음
print('div(6, 3) = ', div(6, 3))

def div(a = 2, b): # 매개변수의 출현순서 뒤에 있는 변수부터 할당
  return a / b

print('div(4) = ', div(4))
print('div(6, 3) = ', div(6, 3))

def get_root(a, b, c):
  r1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)
  r2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)
  return r1, r2

result1, result2 = get_root(1, 2, -8) #각 매개변수에 인자 1, 2, -8이 순서에 맞게 들어감
print('해는', result1, '또는', result2)

def get_root(a, b, c):
  r1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)
  r2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)
  return r1, r2

result1, result2 = get_root(c = -8,a = 1,b = 2) # 키워드 인자는 위치에 상관없이 지정 가능 / 단 키워드인자는 반드시 위치인자 뒤에 와야 함
print('해는', result1, '또는', result2)

def func(shape, width=1, height=1, radius=1):
  if shape == 0:
    return width * height
  if shape == 1:
    return 3.14 * radius ** 2

print('rect area = ', func(0, width=10, height=2)) # 디폴트 인자가 있기때문에 따로 위치인자를 넣어주지 않아도 에러가 안남
print('circle area = ', func(1, radius=5))

def greet1(name):
  print('안녕하세요', name, '씨')
greet1('홍길동')

def greet2(name1, name2):
  print('안녕하세요', name1, '씨')
  print('안녕하세요', name2, '씨')
greet2('홍길동', '홍길순')

def greet(*names): #*을 매개변수 앞에 넣어서 인자의 수가 정해지지 않은 가변인자로 표시
  for name in names:
    print('안녕하세요', name, '씨')
  print('인자의 갯수 : ',len(names))

greet('홍길동', '양만춘', '이순신') #인자가 3개
greet('James', 'Thomas') #인자가 2개

def greet2(*name): #for문 없이 쓰면 name자리에 아래 인자의 모든 내용이 들어감 / 순서대로 들어가지 않음
  print('안녕하세요', name, '씨')
greet2('홍길동', '홍길순')

def sum_nums(*nambers):
  result = 0
  for n in nambers:
    result += n
  return result

print(sum_nums(10, 20, 30)) #10, 20, 30의 합계
print(sum_nums(10, 20, 30, 40, 50)) #10:50의 합계

def sum_nums(*nambers):
  result = 0
  for n in nambers:
    result += n
  return result

print(sum_nums(10, 20, 30)) #10, 20, 30의 합계
print(sum_nums(10, 20, 30, 40, 50)) #10:50의 합계

def sum_nums(*numbers):
  result = 0
  for n in numbers:
    result += n
  return result, result / len(numbers)

print(sum_nums(10, 20, 30)) #10:30의 합계와 그 값의 평균
print(sum_nums(10, 20, 30, 40, 50)) #10:50의 합계와 그 값의 평균

def sum_nums(*numbers):
  avg = 0
  sum = 0
  count = 0
  for n in numbers:
    count += 1
    sum += n
    avg += n

  avg /= count

  print(count,'개의 인자', numbers)
  print('합계 :', sum, '평균 :', avg)

sum_nums(10, 20, 30)
sum_nums(10, 20, 30, 40, 50)

#재귀함수 = 함수 내부에 자기 자신을 호출 하는 함수
def countdown(n):
  if n == 0: #종료 조건이 반드시 필요함
    print('Boom')
  else:
    print(n)
    countdown(n-1)

countdown(5)

def factorial(n):#n!의 재귀적 표현
  if n <= 1: # 종료조건을 반드시 정해야 무한루프에 빠지지않음
    return 1
  else:
    return n * factorial(n-1) # n * (n-1)! 정의에 따른 구현

n = 5
print(f'{n}! = {factorial(n)}') # == print('{}! = {}',format(n ,factorial(n)))

s1, s2 = input('문자열 2개를 압력하세요 : ').split() #한 번에 여러 입력 값을 받는 메소드

s1, s2

num1, num2, num3 = input('세 정수를 ,로 구분하여 입력하세요 : ').split(',')
num1, num2, num3 = int(num1), int(num2), int(num3)
num1, num2, num3

#f-string 이게 요즘 format()메소드
name = 'yeongchan'
string = f'congo, {name}'
print(name)

for i in range(2, 15, 2):
  print('{0:3d} {1:4d} {2:5d}'.format(i ,i*i, i*i*i)) # == print(f'{i:3d} {i*i:4d} {i*i*i:5d}')

print('{:,}'.format(1234567890)) # 1,000단위 쉼표 출력

print('{0:10.3f}'.format(3.1415926))

s1 = 'Long live the king!'
s1.replace('king', 'queen') #문자열 교환

s1.title()

s1 #문자열 메소드를 넣는다고 해서 정의된 s1의 값이 변하는건 아님 / 튜플

sorted('45132', reverse =True) # 순서대로 정렬 / reverse를 사용해서 역순으로 정렬함

a_str = "Hello Python!"
id(a_str)

